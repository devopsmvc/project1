name: Deploy AWS CDK .NET App

on:
  push:
    branches:
      - staging  # âœ… Deploy to staging first
      - main     # âœ… Deploy to production only if staging succeeds

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for versioning

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Get AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Restore Dependencies
        run: dotnet restore src/Project1/

      - name: Run Unit Tests  # âœ… Ensure staging is working before deploying
        run: dotnet test src/Project1.Tests/ --configuration Release --logger trx || exit 1

      - name: Build Application
        run: dotnet build src/Project1/ --configuration Release

      - name: Bootstrap AWS Environment (if not already bootstrapped)
        run: cdk bootstrap aws://$AWS_ACCOUNT_ID/ap-south-1
        env:
          AWS_REGION: ap-south-1

      - name: Synthesize AWS CDK Stack
        run: cdk synth

      - name: Generate Version Number  # âœ… Auto-versioning
        id: versioning
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Current version: $VERSION"
          
          # Extract MAJOR, MINOR, PATCH
          MAJOR=$(echo $VERSION | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Auto-increment PATCH
          NEW_VERSION="v$MAJOR.$MINOR.$(($PATCH + 1))"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Generated new version: $NEW_VERSION"

      - name: Deploy to Staging
        id: deploy_staging
        if: github.ref == 'refs/heads/staging'
        run: cdk deploy --require-approval never
        env:
          AWS_REGION: ap-south-1

      - name: Rollback Staging on Failure  # ðŸ”¥ Auto rollback for Staging
        if: failure() && github.ref == 'refs/heads/staging'
        run: |
          echo "ðŸš¨ Staging deployment failed! Rolling back..."
          cdk destroy -f
        env:
          AWS_REGION: ap-south-1

      - name: Tag Release for Staging  # âœ… Tagging Staging Deployment
        if: success() && github.ref == 'refs/heads/staging'
        run: |
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Deploy to Production (Only if staging is successful)
        id: deploy_production
        if: github.ref == 'refs/heads/main'
        run: cdk deploy --require-approval never
        env:
          AWS_REGION: ap-south-1

      - name: Rollback Production on Failure  # ðŸ”¥ Auto rollback for Production
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          echo "ðŸš¨ Production deployment failed! Rolling back to previous stable version..."
          git revert HEAD --no-edit
          git push origin main
        env:
          AWS_REGION: ap-south-1

      - name: Tag Release for Production  # âœ… Tagging Production Deployment
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
